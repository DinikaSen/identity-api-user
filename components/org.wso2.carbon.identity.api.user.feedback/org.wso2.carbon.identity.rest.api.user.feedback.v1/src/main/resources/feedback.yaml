openapi: 3.0.0
info:
  description: >-
    This document specifies a **RESTfulAPI** for **user feedback management** in
    WSO2 **Identity Server**.
  version: "v1-oas3"
  title: WSO2 Identity Server - User Feedback Management Rest API
  contact:
    name: WSO2 Identity Server
    url: 'https://wso2.com/identity-and-access-management'
    email: architecture@wso2.org
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://localhost:9443/t/{tenant-domain}/api/users/v1'
    variables:
      tenant-domain:
        default: carbon.super
        description: Tenant domain the API is invoked
security:
  - OAuth2: []
  - BasicAuth: []
paths:
  /feedback:
    post:
      summary: Add feedback.
      description: |
        This API is used to submit feedback given by users

         <b>Permission required:</b> none
      operationId: addFeedback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
        description: >-
          Request to initate feedback submission. Feedback message is
          `REQUIRED`.
        required: true
      responses:
        '201':
          description: Feedback submission successful
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      summary: List feedback.
      description: >
        This API returns user feedback messages according to the specified
        filter, sort, and pagination parameters.
      operationId: listFeedback
      parameters:
        - $ref: '#/components/parameters/limitQueryParam'
        - $ref: '#/components/parameters/offsetQueryParam'
        - $ref: '#/components/parameters/filterQueryParam'
        - $ref: '#/components/parameters/sortOrderQueryParam'
        - $ref: '#/components/parameters/sortByQueryParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/feedback/{id}':
    get:
      summary: Get feedback by Id.
      description: |
        This API is used to retrieve a feedback by ID.
      operationId: getFeedback
      parameters:
        - name: id
          in: path
          description: Id of the feedback entry.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete a feedback by ID.
      description: |
        This API is used to delete a feedback by ID.
      operationId: deleteFeedback
      parameters:
        - name: id
          in: path
          description: Id of the feedback entry.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update a feedback entry.
      description: |
        This API is used to update feedback entries.
      operationId: updateFeedback
      parameters:
        - name: id
          in: path
          description: Id of the feedback entry.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackRequest'
        required: true
      responses:
        '200':
          description: Update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  parameters:
    limitQueryParam:
      in: query
      name: limit
      required: false
      description: Maximum number of records to return.
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 30
        example: 10
    offsetQueryParam:
      in: query
      name: offset
      required: false
      description: Number of records to skip for pagination.
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
        example: 5
    filterQueryParam:
      in: query
      name: filter
      required: false
      description: Condition to filter the retrival of records. Filtering is supported for "email" and "tag" only.
      schema:
        type: string
      examples:
        sw:
          value: email sw sales
          summary: filter by 'starts with' operator
        ew:
          value: email ew wso2.com
          summary: filter by 'ends with' operator
        co:
          value: email co sales
          summary: filter by 'contains' operator
        eq:
          value: tag eq issue
          summary: filter by 'equals' operator
    sortOrderQueryParam:
      in: query
      name: sortOrder
      required: false
      description: |
        Define the order how the retrieved records should be sorted.
      schema:
        type: string
        enum:
          - asc
          - desc
        example: asc
    sortByQueryParam:
      in: query
      name: sortBy
      required: false
      description: |
        Attribute by which the retrieved records should be sorted. Sorting is supported for "time_created" only
      schema:
        type: string
      example: time_created
  responses:
    NotFound:
      description: The specified resource is not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized.
    ServerError:
      description: Internal Server Error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotImplemented:
      description: Not Implemented.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad Request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Resource Forbidden.
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://localhost:9443/oauth/authorize'
          tokenUrl: 'https://localhost:9443/oauth/token'
          scopes: {}
        password:
          tokenUrl: 'https://localhost:9443/oauth/token'
          scopes: {}
  schemas:
    FeedbackRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: This is a sample feedback
        email:
          type: string
          example: kim@gmail.com
        contactNo:
          type: string
          example: 0123456789
        tags:
          type: array
          items:
            type: string
            example: issue
    FeedbackListResponse:
      type: object
      properties:
        totalResults:
          type: integer
          description: The total number of results matching the query.
          example: 30
        startIndex:
          type: integer
          description: The 1-based index of the first result in the current set of results.
          example: 5
        count:
          type: integer
          description: Number of results returned in response.
          example: 1
        resources:
          type: array
          description: Feedback entries matching the query.
          items:
            $ref: '#/components/schemas/FeedbackResponse'
        links:
          type: array
          description: Navigation links.
          items:
            $ref: '#/components/schemas/Link'
          example:
            - href: /t/carbon.super/api/user/v1/me/feedback?offset=10&limit=10
              rel: next
            - href: /t/carbon.super/api/user/v1/me/feedback?offset=0&limit=5
              rel: previous
            - href: /t/carbon.super/api/user/v1/me/feedback?offset=0&limit=10
              rel: first
            - href: /t/carbon.super/api/user/v1/me/feedback?offset=20&limit=10
              rel: last
    FeedbackResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            created:
              type: string
              example: '2020-03-25T11:27:36'
            location:
              type: string
              example: >-
                https://localhost:9443/feedback/7bac6a86-1f21-4937-9fb1-5be4a93ef469
        id:
          type: string
          example: 7bac6a86-1f21-4937-9fb1-5be4a93ef469
        message:
          type: string
          example: This is a sample feedback
        email:
          type: string
          example: kim@gmail.com
        contactNo:
          type: string
          example: 0123456789
        tags:
          type: array
          items:
            type: string
            example: issue
    Link:
      type: object
      properties:
        href:
          type: string
          format: uri
          description: Path to the target resource.
        rel:
          type: string
          description: Describes how the current context is related to the target resource.
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: FM-10000
        message:
          type: string
          example: Some Error Message
        description:
          type: string
          example: Some Error Description
        traceId:
          type: string
          example: e0fbcfeb-3617-43c4-8dd0-7b7d38e13047